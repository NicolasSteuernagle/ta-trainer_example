{"version":3,"sources":["components/CardViewer.tsx","components/UserList.tsx","components/ControlPanel.tsx","utilities/data.ts","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","answerRevealed","hintRevealed","Col","Body","Title","Text","prompt","answer","hint","UserList","users","setUsers","items","onChange","newUsers","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","getLocalStorageUsers","rawUsers","localStorage","getItem","JSON","parse","ControlPanel","setCard","reveal","reveal2","deck","showAddCardModal","useState","Button","onClick","Math","floor","random","length","className","shuffledUsers","array","randomIndex","currentIndex","shuffle","setItem","stringify","variant","AddCardModal","visible","setVisible","addCard","setPrompt","setAnswer","setHint","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","ev","target","Footer","App","CARDS","activeCard","setActiveCard","setDeck","Container","Row","newCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6415fcbd.chunk.js","sourcesContent":["import { Col, Card as BootstrapCard } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\n\r\nexport function CardViewer({card, answerRevealed, hintRevealed}: {card: Card, answerRevealed: boolean, hintRevealed: boolean}): JSX.Element {\r\n    return <Col>\r\n    <BootstrapCard>\r\n        <BootstrapCard.Body>\r\n            <BootstrapCard.Title>Card Viewer</BootstrapCard.Title>\r\n            <BootstrapCard.Text>\r\n                <strong>Prompt</strong>: {card.prompt}\r\n            </BootstrapCard.Text>\r\n            {answerRevealed && <BootstrapCard.Text>\r\n                <strong>Suggested Answer</strong>: {card.answer}\r\n            </BootstrapCard.Text>}\r\n            {hintRevealed && <BootstrapCard.Text>\r\n                <strong>Hint</strong>: {card.hint}\r\n            </BootstrapCard.Text>}\r\n        </BootstrapCard.Body>\r\n    </BootstrapCard>\r\n    </Col>\r\n}","import EditableDndList, { Task } from \"editable-dnd-list\";\r\n\r\n\r\nexport function UserList({users, setUsers}: {users: Task[], setUsers: (t: Task[]) => void}): JSX.Element{\r\n\r\n\r\n    function handleChange(newUsers: Task[]): void{\r\n        setUsers(newUsers);\r\n    }\r\n\r\n    return <EditableDndList items={users} onChange={handleChange} />;\r\n}","import { Button, Col } from 'react-bootstrap';\r\nimport { Card } from '../interfaces/card';\r\nimport CARDS from '../assets/cards.json';\r\nimport { getRandomElement, shuffle } from '../utilities/data';\r\nimport { BlockLike } from 'typescript';\r\nimport { UserList } from './UserList';\r\nimport { useState } from 'react';\r\nimport { Task, Task as User} from 'editable-dnd-list';\r\n\r\nexport const LOCAL_STORAGE_USERS = 'ta-trainer-users';\r\n\r\nexport const INITIAL_USERS: User[] = [\r\n    {id: '1', text: \"Nick\"},\r\n    {id: '2', text: \"Peanut\"},\r\n    {id: '3', text: \"Bandit\"},\r\n    {id: '4', text: \"Bella\"}\r\n];\r\n\r\nexport function getLocalStorageUsers(): User[] {\r\n    let rawUsers: string|null = localStorage.getItem(LOCAL_STORAGE_USERS);\r\n    if(rawUsers === null){\r\n        return [...INITIAL_USERS];\r\n    }else{\r\n        return JSON.parse(rawUsers);\r\n    }\r\n}\r\n\r\nexport function ControlPanel({setCard, reveal, answerRevealed, reveal2, hintRevealed, deck, showAddCardModal}: {setCard: (c: Card)=>void, reveal: (r: boolean) => void, reveal2:(h: boolean) => void, answerRevealed: boolean, hintRevealed: boolean, showAddCardModal: (b: boolean)=>void, deck: Card[]}): JSX.Element{\r\n    const [users, setUsers] = useState<User[]>(getLocalStorageUsers);\r\n\r\n    \r\n    function setRandomCard(){\r\n        reveal(false);\r\n        reveal2(false);\r\n        setCard(getRandomElement(deck))\r\n    }\r\n\r\n    function shuffleUsers(){\r\n        let shuffledUsers: User[] = shuffle(users)\r\n        setUsers([...shuffledUsers]);\r\n    }\r\n\r\n    function save(){\r\n        localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users));\r\n\r\n    }\r\n\r\n    function addNewCard(){\r\n        showAddCardModal(true);\r\n    }\r\n\r\n    return <Col>\r\n        <h1>Control Panel</h1>\r\n        <UserList users = {users} setUsers = {setUsers}></UserList>\r\n        <Button onClick = {setRandomCard} className=\"m-4\">Swap Current Card</Button>\r\n        <Button onClick = {() => reveal(!answerRevealed)}className=\"m-4\">Reveal Answer</Button>\r\n        <Button onClick = {() => reveal2(!hintRevealed)}className=\"m-4\">Reveal Hint</Button>\r\n        <Button onClick = {shuffleUsers}className=\"m-4\">Shuffle Users</Button>\r\n        <Button onClick = {save}className=\"m-4\" variant = \"success\">Save</Button>\r\n        <Button onClick = {addNewCard}className=\"m-4\" variant = \"danger\">Add New Card</Button>\r\n    </Col>\r\n}","//https://stackoverflow.com/a/5915122\r\n/**\r\n * Grab a Random Element From a List\r\n * @param items Any kind of list\r\n * @returns one randomly chosen element\r\n */\r\nexport function getRandomElement<T>(items: T[]): T {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}\r\n\r\n//https://stackoverflow.com/a/2450976\r\n/**\r\n * shuffles an array in-place\r\n * @param array Any array of elements\r\n * @returns The same array, shuffled ( modified in place)\r\n */\r\nexport function shuffle<T>(array: T[]): T[] {\r\n    let currentIndex = array.length,  randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (currentIndex !== 0) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n  \r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex], array[currentIndex]];\r\n    }\r\n    return array;\r\n}","import React, { useState } from \"react\";\r\nimport { Modal, Button, Form } from \"react-bootstrap\";\r\nimport { Card } from '../interfaces/card';\r\n\r\nexport function AddCardModal({visible, setVisible, addCard}: \r\n    {visible: boolean, setVisible: (b:boolean)=>void, addCard:(c: Card) => void}): JSX.Element {\r\n        const[prompt, setPrompt] = useState<string>(\"PROMPT TEXT\");\r\n        const[answer, setAnswer] = useState<string>(\"ANSWER TEXT\");\r\n        const[hint, setHint] = useState<string>(\"HINT TEXT\");\r\n\r\n        function saveCard(){\r\n            console.log(\"SAVING\", prompt, answer, hint);\r\n            addCard({\r\n                id: Math.random(),\r\n                kind: \"Custom\",\r\n                prompt,\r\n                answer,\r\n                hint\r\n            });\r\n            setVisible(false);\r\n        }\r\n\r\n\r\n    const hide = ()=>setVisible(false);\r\n    return (\r\n    <Modal show ={visible} onHide={hide}>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>Modal Title</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n            <Form>\r\n                <Form.Group className = \"mb-3\" controlId =\"addCardForm.promptTextArea\">\r\n                    <Form.Label>Prompt</Form.Label>\r\n                    <Form.Control as = \"textarea\" rows = {3} \r\n                    value = {prompt}\r\n                    onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setPrompt(ev.target.value)}/>\r\n                </Form.Group>\r\n                <Form.Group className = \"mb-3\" controlId =\"addCardForm.answerTextArea\">\r\n                    <Form.Label>Answer</Form.Label>\r\n                    <Form.Control as = \"textarea\" rows = {3}\r\n                    value = {answer}\r\n                    onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setAnswer(ev.target.value)}/>\r\n                </Form.Group>\r\n                <Form.Group className = \"mb-3\" controlId =\"addCardForm.hintTextArea\">\r\n                    <Form.Label>Hint</Form.Label>\r\n                    <Form.Control as = \"textarea\" rows = {3}\r\n                    value = {hint}\r\n                    onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setHint(ev.target.value)}/>\r\n                </Form.Group>\r\n            </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n            <Button variant= \"secondary\" onClick = {hide}>Close</Button>\r\n            <Button variant= \"primary\" onClick = {hide}>Save Changes</Button>\r\n        </Modal.Footer>\r\n</Modal>)\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport CARDS from './assets/cards.json';\r\nimport { CardViewer } from './components/CardViewer';\r\nimport { ControlPanel } from './components/ControlPanel';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Row } from 'react-bootstrap';\r\nimport { Card } from './interfaces/card';\r\nimport { AddCardModal } from './components/AddCardModal';\r\n\r\nfunction App(): JSX.Element {\r\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\r\n  const [answerRevealed, reveal] = useState<boolean>(false);\r\n  const [hintRevealed, reveal2] = useState<boolean>(false);\r\n  const[visible, setVisible] = useState<boolean>(false);\r\n  const [deck, setDeck] = useState<Card[]>(CARDS);\r\n\r\n  function addCard(newCard: Card){\r\n    setDeck([...deck, newCard]);\r\n  }\r\n\r\n  return (\r\n    <Container className=\"App\">\r\n      <Row>\r\n        <ControlPanel setCard={setActiveCard} reveal={reveal} answerRevealed={answerRevealed} reveal2 = {reveal2} hintRevealed = {hintRevealed} showAddCardModal ={setVisible} deck = {deck}></ControlPanel>\r\n        <CardViewer card ={activeCard} answerRevealed={answerRevealed} hintRevealed = {hintRevealed}></CardViewer>\r\n        <AddCardModal visible ={visible} setVisible = {setVisible} addCard = {addCard}></AddCardModal>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}